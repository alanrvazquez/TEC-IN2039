---
title: |
   | Sesión 7: 
   | Datos con múltiples variables  
author: 
  - name: Alan R. Vázquez
    affiliations:
      - name: Tecnológico de Monterrey
format: revealjs
editor: visual
slide-number: True
logo: IN2039_logo.png
css: style.css
---

## Los Tópicos de Hoy

1.  Datos con mas de una variable

2.  Dos variables numéricas

3.  Una variable numérica y una categórica

4.  Dos variables categóricas

5.  Tres o más variables

## Recuerda cargar las librerías

Aquí usaremos las librerías `ggplot2`, `ggformula`, y `readxl`.

Carguémoslas en Google Colab y R antes de comenzar.

```{r}
#| echo: true
#| output: false

# Nos se te olvide instalar la librería "ggformula" en Google Colab.
# install.packages("ggformula")
library(readxl)
library(ggplot2)
library(ggformula)
library(dplyr) # Nueva librería.
```

## Carga los datos

En Google Colab, el archivo "auto_dataset.xlsx" debe de estar en la carpeta llamada "content" o "contenido."

Ahora carguemos los datos R.

```{r}
auto_data <- read_excel("auto_dataset.xlsx") # Leer los datos.
head(auto_data) # Ver las primeras 6 observaciones.
```

## Datos multivariados

Los datos multivariados son conjunto de datos que contienen observaciones de dos o más variables.

-   Las variables pueden ser numéricas o categóricas.

-   Las variables pueden o no depender las unas de las otras.

## Principio 1

En el contexto de múltiples variables, las preguntas típicas a estudiar son

::: incremental
-   ¿Existen características potencialmente importantes con las que crear comparaciones?

-   ¿Qué comparación adicional podría aportar valor añadido a la investigación?

-   ¿Cómo se relacionan entre sí la variable $X$ y la variable $Y$?

-   ¿Es la distribución de la variable $X$ la misma en todos los subgrupos definidos por la variable $Z$?

-   ¿Hay alguna observación inusual en la combinación de valores de las variables $X$ y $Y$? ¿En $X$ para un subgrupo de $Z$?
:::

## ¿Qué buscar en una relación?

Cuando investigamos múltiples variables, examinamos las relaciones entre ellas, además de sus distribuciones.

Usualmente denominamos a una variable como la variable dependiente o de respuesta. A ella la denotamos con el símbolo $Y$.

La otra variable la llamamos variable independendiente o predictor. A ella la denotamos con el símbolo $X$.

*Nuestro objetivo es saber si cambios en la variable* $X$ están asociados a cambios en la variable $Y$, y el tipo de asociación.

## Tipos de gráficas

Primero nos enfocamos en estudiar la relación entre dos variables.

::: center
| Tipo        | Gráfica                                                                                       |
|:-----------------------|:----------------------------------------------|
| Numéricas   | Gráfico de dispersión                                                                         |
| Categóricas | Gráfico de barras lado a lado, gráfico de barras apiladas, gráfico de mosaico                 |
| Mixta       | Curvas de densidad superpuestas, diagramas de caja uno al lado del otro, gráficas de contorno |
:::

::: notes
For two features, the combination of types (both quantitative, both qualitative, or a mix) matters.
:::

# Dos variables numéricas

## Gráfica de dispersión

Si ambas variables son numéricas, es común examinar su relación con un ***diagrama de dispersión***. Cada punto en un diagrama de dispersión marca la posición de un par de valores para una observación.

Con los diagramas de dispersión, buscamos relaciones lineales y no lineales, y examinamos el nivel de las relaciones.

En la

## 

Para construir gráficas de dispersión usamos la función `gf_point(Y ~ X, data = data_set)`.

```{r}
#| fig-pos: center
#| echo: true

gf_point(mpg ~ weight, data = auto_data)
```

## Aplicando el principio 3

Recuerda aplicar el principio 3 para mejorar la gráfica.

```{r}
#| fig-pos: center
#| echo: true
#| code-fold: true

mi_diagrama <- gf_point(mpg ~ weight, data = auto_data, color = "darkblue") + labs(title = "Relación de peso y millas por galón en autos", x = "Peso (lb)", y = "Millas por galón")
mi_diagrama <- mi_diagrama + theme(axis.text=element_text(size=20), axis.title=element_text(size=20),
                                   plot.title=element_text(size=25))
mi_diagrama
```

## 

También puedes cambiar la forma y el tamaño de los puntos usando los argumentos `shape` y `size`, respectivamente.

```{r}
#| fig-pos: center
#| echo: true
#| code-fold: true

gf_point(mpg ~ weight, data = auto_data, color = "darkblue", shape = 1, size = 5)
```

## 

Lista de posibles formas de los puntos.

![](images/FIG-SCATTER-SHAPES-CHART-1.png){fig-align="center" width="530" height="344"}

## Transformaciones

También buscamos ver si una transformación de una u otra característica o de ambas conduce a una relación lineal.

Esto se puede hacer aplicando la función `log()` a una de las variables.

```{r}
#| fig-pos: center
#| echo: false

gf_point(log(mpg) ~ weight, data = auto_data)
```

## El efecto de una transformación

El efecto de una transformación es "linealizar" la relación entre las variables.

::: columns
::: {.column width="50%"}
```{r}
#| fig-pos: center
#| echo: true

gf_point(mpg ~ weight, 
         data = auto_data)
```
:::

::: {.column width="50%"}
```{r}
#| fig-pos: center
#| echo: true

gf_point(log(mpg) ~ weight, 
         data = auto_data)
```
:::
:::

El diagrama de dispersión de la derecha explora la relación $log(Y) = X$. O , qeuivalentemente, la relación $Y = e^X$.

## ¿Qué pasa con las gráficas individuales?

Es importante tener en cuenta que a dos gráficos univariados les falta información que se encuentra en un gráfico bivariado.

-   Información sobre cómo las dos características varían juntas.

En la práctica, los histogramas de dos variables numéricas no contienen suficiente información para crear un diagrama de dispersión de las características.

## 

::: columns
::: {.column width="50%"}
```{r}
#| fig-pos: center
#| echo: true
#| code-fold: true

histogram_mpg <- gf_histogram( ~ mpg, data = auto_data, fill = "darkblue", color = "black") 
histogram_mpg <- histogram_mpg + labs(title = "Distribución de milas por galón", x = "Millas por galón", y = "Frecuencia")
histogram_mpg <- histogram_mpg + theme(axis.text=element_text(size=20), axis.title=element_text(size=20),
                                       plot.title=element_text(size=25))
histogram_mpg
```
:::

::: {.column width="50%"}
```{r}
#| fig-pos: center
#| echo: true
#| code-fold: true

histogram_weight <- gf_histogram( ~ weight, data = auto_data, fill = "darkblue", color = "black") 
histogram_weight <- histogram_weight + labs(title = "Distribución de peso", x = "Peso (lb)", y = "Frecuencia")
histogram_weight <- histogram_weight + theme(axis.text=element_text(size=20), axis.title=element_text(size=20), plot.title=element_text(size=25))
histogram_mpg
```
:::
:::

# Una variable categórica y una numérica

## !Divide los datos en grupos!

Para examinar la relación entre una variable numérica y una categórica, a menudo utilizamos la variable categórica para dividir los datos en grupos y comparar la distribución de la variable numérica entre estos grupos.

En exte contexto:

-   $X$ es la variable categórica.
-   $Y$ es la variable numérica.

## 

Por ejemplo, podemos comparar la distribución de las millas por galón en los diferentes lugares de donde provienen los autos.

```{r}
#| fig-pos: center
#| echo: true
#| code-fold: true

hist_mpg_by_origin <- gf_histogram( origin ~ mpg, data = auto_data, fill = "darkblue", color = "black") 
hist_mpg_by_origin <- hist_mpg_by_origin + labs(title = "Distribución de peso", x = "Peso (lb)", y = "Frecuencia")
hist_mpg_by_origin <- hist_mpg_by_origin + theme(axis.text=element_text(size=20), axis.title=element_text(size=20), plot.title=element_text(size=25))
histogram_mpg
```

## Gráfica de cajas por grupos

Los diagramas de caja uno al lado del otro ofrecen una comparación similar de distribuciones entre grupos.

El diagrama de caja ofrece un enfoque más simple que puede brindar una comprensión aproximada de una distribución.

```{r}
#| fig-pos: center
#| echo: true
#| code-fold: true

bp_mpg_by_origin <- gf_boxplot( mpg ~ origin, data = auto_data, fill = "lightblue", color = "black") 
bp_mpg_by_origin <- bp_mpg_by_origin + labs(y = "Millas por galón", x = "Origen")
bp_mpg_by_origin <- bp_mpg_by_origin + theme(axis.text=element_text(size=20), axis.title=element_text(size=20))
bp_mpg_by_origin
```

## Violin plots by group

Del mismo modo, los diagramas de violín dibujan curvas de densidad a lo largo de un eje para cada grupo.

La curva se invierte para crear una forma simétrica de "violín".

```{r}
#| fig-pos: center
#| echo: true
#| code-fold: true

violin_mpg_by_origin <- gf_violin( mpg ~ origin, data = auto_data, fill = "orange", color = "black") 
violin_mpg_by_origin <- violin_mpg_by_origin + labs(y = "Millas por galón", x = "Origen")
violin_mpg_by_origin <- violin_mpg_by_origin + theme(axis.text=element_text(size=20), axis.title=element_text(size=20))
violin_mpg_by_origin
```

## Resúmenes estadísticos

En muchos casos, es útil calcular resúmenes estadísticos de la variable numérica $Y$ para cada categórica de la variable categórica $X$.

Para hacer esto, debemos usar la librería `library(dplyr)`. Esta librería contiene muchas funciones útiles. Aquí usaremos dos `group_by()` y `summarize()` para agrupar y resumir datos, respectivamente.

```{r}
#| fig-pos: center
#| echo: true
#| code-fold: true

auto_data %>% group_by(origin) %>% 
  summarize("mean" = mean(mpg), "max" = max(mpg), "min" = min(mpg))
```

## 

Puedes guardar la tabla en un nuevo objeto que puedes utilizar para visualizar.

```{r}
#| fig-pos: center
#| echo: true
#| code-fold: true

sum_data <- auto_data %>% group_by(origin) %>% 
  summarize("Promedio" = mean(mpg), "Maximo" = max(mpg), "Minimo" = min(mpg))

gf_point(Promedio ~ origin, data = sum_data, size = 5) + theme(axis.text=element_text(size=20), axis.title=element_text(size=20))
```

## Incluir el cero

```{r}
#| fig-pos: center
#| echo: true
#| code-fold: true

gf_point(Promedio ~ origin, data = sum_data, size = 5) + scale_y_continuous(limits = c(0, 35))
```


# Dos variables categóricas

## Dividir los datos en grupos según una variable.

Con dos variables categóricas, a menudo comparamos la distribución de una variable entre subgrupos definidos por la otra variale.

De hecho, mantenemos constante una variable y trazamos la distribución de la otra.

Para hacer esto, podemos usar algunos de los mismos gráficos que usamos para mostrar la distribución de una variable categórica, como un gráfico de barras.

## We need to pre-process the data

To examine the relationship between these two qualitative features, we calculate three sets of proportions (one each for low, medium, and high suitability).

Within each suitability category, we find the proportion of small, medium, and large dogs. These proportions are displayed in the following table.

\[R CODE TO ILLUSTRATE THIS\]

## Gráfico de barras lado a lado



## Gráfico de barras apliadas




# Más de una variable

## Gráficas para tres variables

Cuando examinamos una distribución o relación, a menudo queremos compararla entre subgrupos de datos. Este proceso de condicionamiento sobre factores adicionales a menudo conduce a visualizaciones que involucran tres o más variables.

Aquí explicamos cómo leer gráficos que se usan comúnmente para visualizar múltiples variables.

## Gráfica de dispersión por color

Para dos variables numéricas y una categórica.

```{r}
#| fig-pos: center
#| echo: true
#| code-fold: true

gf_point(mpg ~ weight, color = ~origin, data = auto_data) 
```

## Gráfico de facetas o enrejado

Para dos variables numéricas (o categóricas) y una categórica.

```{r}
#| fig-pos: center
#| echo: true
#| code-fold: true

gf_point(mpg ~ weight, data = auto_data) %>% gf_facet_grid(origin ~ .)
```

## Two quantitative and one qualitative

R code

## Two qualitative and one quantitative variable

a

## Three quantitative variables

aa

## Three categorical variables

# Actividad

## Emphasize the important difference

The activity may be about selecting the best graphs among two possibilities. When we show the answer we can include the code to generate the plot.

-   Emphasize

-   Ordering

-   Stacking

<https://learningds.org/ch/11/viz_comparisons.html>

# Applying principle 3

## Adding context

We have used text in our graphs throughout this chapter to provide meaningful axis labels that include units of measurement, tick-mark labels for categories, and titles

A good goal is to include enough context in a plot so that it can stand alone—a reader should be able to get the gist of the plot without needing to search for explanation elsewhere.

That said, every element of a statistical graph should have a purpose.

## Labels and captions

Text context includes *labels* and *captions*. It is a good practice to consistently use informative labels on tick marks and axes.

Example of bad and good labels

Informative labels are especially important for plots that other people will see and interpret.

## 

Captions serve several purposes. They describe what has been plotted and orient the reader. Captions also point out important features of the plot and comment on their implications.

\[Examples of good and bad captions\]

::: notes
Readers often skim a publication and focus on section headings and visualizations, so plot captions should be self-contained.
:::

## Reference Markers

*Reference markers* bring additional context to the plotting region. Reference points and lines that provide benchmarks, historical values, and other external information help form comparisons and interpretations.

\[EXAMPLES OF LABELING MARKERS\]

::: notes
For example, we often add a reference line with slope 1 to a quantile-quantile plot. We might also add a vertical line on a time-series plot to mark a special event, like a natural disaster.
:::

## Ajustando los tick marks

¿Es apropiado incluir el zero o no?

Ejemplo de histograma sin zero y con zero.

## Transformaciones

Another common way to adjust scale is to transform the data or the plot’s axes. We use transformations for skewed data so that it is easier to inspect the distribution.

And when the transformation produces a symmetric distribution, the symmetry carries with it useful properties for modeling (which we will see later).

There are multiple ways to transform data, but the log transformation tends to be especially useful.

## The log transformation

The log transform can reveal several common types of relationships. Because of this, the log transform is considered the jackknife of transformations.

![](images/Screenshot%202024-01-30%20at%201.32.44%20p.m..png){fig-align="center"}

## What do you see?

Show image in r

This is *overplotting*, where we have overlapping points because of a large dataset.

## Smoothing

We can find high-density regions of a scatter plot by binning data, like in a histogram. The following plot, remakes the earlier scatter plot of the Cherry Blossom race times against age. This plot uses hexagonal bins to aggregate points together, and then shades the hexagons based on how many points fall in them:

\[SHOW PLOT WITH AND WITHOUT SMOOTHING\]

## Another important application

Another smoothing approach that is often more informative smooths the y-values for points with a similar x-value. To explain, let’s group together runners with similar ages; we use five-year increments: 20–25, 25–30, 30–35, and so on. Then, for each five-year bin of runners, we average their race times, plot the average time for each group, and connect the points to form a “curve”:

\[SHOW PLOT WITH AND WITHOUT SMOOTHING\]

## When not to smooth

Smoothing and aggregating can help us see important features and relationships, but when we have only a handful of observations, smoothing techniques can be misleading.

With just a few observations, we prefer rug plots over histograms, box plots, and density curves, and we use scatter plots rather than smooth curves and density contours.

\[SHOW R CODE WITH BOXPLOT AND STRIPLOT\]

::: notes
One of the most common misuses of smoothing happens with box plots. As an example, here is a collection of seven box plots of longevity, one for each of seven types of dog breed:

Some of these box plots have as few as two or three observations. The strip plot that follows is a preferable visualization:

In this plot, we can still compare the groups, but we also see the exact values in each group. Now we can tell that there are only three breeds in the non-sporting group; the impression of a skewed distribution, based on the box plot, reads too much into the shape of the box.
:::
