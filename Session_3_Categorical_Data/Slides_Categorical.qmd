---
title: |
   | Sesi칩n 3: 
   | Variables Categ칩ricas  
author: 
  - name: Alan R. V치zquez
    email: alanrvazquez@tec.mx
    affiliations:
      - name: Tecnol칩gico de Monterrey
format: 
  revealjs:
    chalkboard: true
    multiplex: true
revealjs-plugins:
  - pointer    
editor: visual
slide-number: True
logo: IN2039_logo.png
css: style.css
---

## Los T칩picos de Hoy

[*Enfocarnos en 1 variable categ칩rica.*]{style="color:darkblue;"}

<br/>

::: columns
::: {.column width="50%"}
1.  Res칰menes estad칤sticos
:::

::: {.column width="50%"}
2.  Tipos de gr치ficas
:::
:::

::: columns
::: {.column width="30%"}
3.  Actividad
:::

::: {.column width="70%"}
:::
:::

## Primero lo primero

Hoy usaremos R para construir graficas y tablas. Para esto, utilizaremos las librerias que ya vimos antes como `ggplot2`, `ggformula`, y `readxl`.

<br/>

Carguemoslas en R antes de comenzar.

```{r}
#| echo: true
#| output: false

library(readxl)
library(ggplot2)
library(ggformula)
```

## Penguins Dataset

Ilustraremos los conceptos de hoy utlizando el conjunto de datos `penguins.xlsx`.

::: columns
::: {.column width="68%"}
Cargalo en R usando el siguiente c칩digo.

```{r}
#| output: false
#| echo: true
#| code-overflow: wrap

penguins_data <- read_excel("penguins.xlsx")
```
:::

::: {.column width="32%"}
![](images/clipboard-1776523589.png){fig-align="right" width="561"}
:::
:::

Recuerda que el archivo debe de estar en la misma carpeta que tu c칩digo.

## 

![](images/clipboard-3758853900.png)

## 

![](images/clipboard-3461599711.png){fig-align="center" width="647"}

## Asegurate que R sabe que la variable es categorica

Antes de comenzar, debemos de checar si R reconoce las variables como categ칩ricas o num칠ricas.

> En R, las variables categoricas se conocen como `factor` y las variables num칠ricas como `numeric`.

Le puedes pregunar a R por una variable en particular, por ejemplo, `species`, as칤:

```{r}
#| echo: true
#| output: true

is.factor(penguins_data$species)
```

## R no es inteligente

A pesar de que la variable `species` claramente es categ칩rica, R no reconoce esto. Para asegurarnos que R sepa que la variable es categ칩rica, hacemos lo siguiente

```{r}
#| echo: true
#| output: true

penguins_data$species <- factor(penguins_data$species)
```

<br/>

Preguntemosle a R el tipo de variable otra vez.

```{r}
#| echo: true
#| output: true

is.factor(penguins_data$species)
```

## Te recomiendo hacer lo mismo para las otras variables categ칩ricas

```{r}
#| echo: true
#| output: true

penguins_data$island <- factor(penguins_data$island)
penguins_data$sex <- factor(penguins_data$sex)
penguins_data$year <- factor(penguins_data$year)
```

## Resumenes Estad칤sticos

> Un **resum칠n estad칤stico** nos ayuda a resumir un conjunto de observaciones de una manera simple.

Los res칰menes num칠ricos m치s utilizados para datos categ칩ricos son las frecuencias y las frecuencias relativas.

-   La [**frecuencia**]{style="color:darkblue;"} de una categor칤a es la cantidad de elementos de muestra que pertenecen a esa categor칤a.

-   La [**frecuencia relativa**]{style="color:darkblue;"} es la frecuencia dividida por el n칰mero total de observaciones.

## Tabla de Frecuencia

Resume una variable categorica contando los valores por categor칤a.

::: columns
::: {.column width="50%"}
```{r}
#| echo: true
#| output: true
#| code-overflow: wrap

table(penguins_data$species)
```
:::

::: {.column width="50%"}
| **Especie** | **Frecuencia** |
|-------------|----------------|
| Adelie      | 152            |
| Chinstrap   | 68             |
| Gentoo      | 124            |
| **Total**   | **344**        |
:::
:::

-   **Frecuencia**: N칰mero de observaciones en cada categor칤a.

-   **Total**: Suma total de observaciones.

::: notes
1.  Ventajas de las frequencias.

2.  Resumen claro y conciso de los datos categ칩ricos.

3.  Facilita la identificaci칩n de patrones y tendencias.

4.  Ayuda en la toma de decisiones informadas.
:::

## Tabla de Frecuencia Relativa

Resume una variable categorica calculando la *proporci칩n de valores* por categor칤a.

::: columns
::: {.column width="55%"}
```{r}
#| echo: true
#| output: true
#| code-overflow: wrap

# Calcula el n칰mero de observaciones.
n <- nrow(penguins_data) 

# Calcula la frequencia relativa.
table(penguins_data$species)/n
```
:::

::: {.column width="45%"}
| **Especie** | **Frecuencia relativa** |
|-------------|-------------------------|
| Adelie      | 0.4418605               |
| Chinstrap   | 0.1976744               |
| Gentoo      | 0.3604651               |
| **Suma**    | **1**                   |
:::
:::

-   **Frecuencia relativa**: N칰mero de observaciones en cada categor칤a dividida por el total.

::: notes
La ventaja de la frequencia relativa es que se puede interpretar como una probabilidad. Lo que da mas informaci칩n.
:::

## Gr치fica de Barras

Representa visualmente una tabla de frequencias or frequencias relativas.

La frecuencia (o frequencia relativa) se representa por una barra de altura proporcional.

Puedes construir una grafica de barras usando la funcion `gf_bar()` as칤:

```{r}
#| echo: true
#| output: true
#| fig-align: center
#| code-overflow: wrap
#| output-location: slide

gf_bar( ~ species, data = penguins_data)
```

## 

Si quieres graficar la frequencia relativa, usa la funci칩n `gf_percents`.

```{r}
#| echo: true
#| output: true
#| fig-align: center
#| code-overflow: wrap

gf_percents( ~ species, data = penguins_data)
```

## Actividad (*solo* mode)

Usando las herramientas para gr치ficos en ggplot, modifica el c칩digo anterior para que la gr치fica se vea asi.

```{r}
#| echo: false
#| output: true
#| fig-height: 4
#| fig-align: center

gf_percents( ~ species, data = penguins_data, fill = ~species) + labs(title = "Proporciones de ping칲inos", subtitle = "Distribuci칩n ping칲inos en Adelie, Chinstrap, and Gentoo", x = "Tipo de especie", y = "Frecuencia relativa", fill = "Especie") 

```

```{r}
countdown::countdown(minutes = 10)
```

## Gr치fico circular

::: columns
::: {.column width="50%"}
-   Se construye dividiendo un c칤rculo en varias porciones que representan las categor칤as de la variable.

-   La porci칩n de una categoria es su frequencia relativa.

-   Este gr치fico te permite dar un vistazo r치pido a las proporciones de cada categor칤a.
:::

::: {.column width="50%"}
![](images/clipboard-800609446.png)
:::
:::

::: notes
Pie charts versus bar charts.

**Bar charts can serve as a good way to show comparisons between categories**. It is generally observed that new trends tend to shy away from using pie charts, as it is difficult for the human eye to judge the exact angle that shows the value of a category in a pie chart.
:::

## Actividad (*cooperative* mode)

[Preguntale a ChatGPT]{style="color:darkgreen;"}

1.  Ve ChatGPT en <https://chat.openai.com/>
2.  Pidele a ChatGPT que te muestre como generar una gr치fica de circular (o de *pastel*) usando **ggplot2** en R.
3.  Adapta tu c칩gigo para producir una gr치fica circular de la variable `island` en `penguin_data`.

```{r}
countdown::countdown(minutes = 10)
```

# Transformando variables categ칩ricas

## Aplica el Principio 3

> *Enriquece con informaci칩n adicional.*

Podemos mejorar gr치ficas de variables categ칩ricas usando estas t칠cnicas:

-   Re-etiquetar las categor칤as para que sean m치s informativas.

-   Re-ordenar las categor칤as para que sigan su orden natural.

-   Colapsar categor칤as para simplificar una visualizaci칩n.

## Ejemplo: Boston Housing Dataset

Este conjunto de datos contiene informaci칩n recopilada por el Servicio del Censo de EE. UU. sobre viviendas en el 치rea de Boston, Massachusetts.

::: columns
::: {.column width="60%"}
![](images/boston_dataset.png)
:::

::: {.column width="40%"}
![](images/clipboard-3653087831.png)
:::
:::

## 

Los datos estan en el archivo `Boston_dataset.xlsx`. Cargalos en R usando el siguiente comando.

```{r}
#| echo: true
#| output: true

Boston_dataset <- read_excel("Boston_dataset.xlsx")
head(Boston_dataset)
```

Nos concentraremos en las siguientes variables

-   `chas` : Si la casa limita con el r칤o Charles (1: Si y 0: No)

-   `rad` : Indice de accesibilidad a carreteras radiales (`Low`, `Medium`, `High`).

## Recuerda...

Asegurate de que R sabe que esas variables son categ칩ricas.

```{r}
#| echo: true
#| output: true

Boston_dataset$chas <- factor(Boston_dataset$chas)
Boston_dataset$rad <- factor(Boston_dataset$rad)
```

## Re-etiquetado

Vamos a construir una gr치fica de barras de `chas`.

```{r}
#| echo: true
#| output: true
#| fig-pos: center

gf_percents( ~ chas, data = Boston_dataset)

```

Sin embargo, las categor칤as en la gr치fica no son informativas.

## 

Lo mejor es re-nombrar las categor칤as de la variable `chas` para que la gr치fica de barras de mas informaci칩n al usuario.

1.  Verifica los nombres de las categor칤as en la variable.

    ```{r}
    #| echo: true
    #| output: true

    levels(Boston_dataset$chas)
    ```

```{=html}
<!-- -->
```
2.  Re-emplaza por nombres apropiados.

    ```{r}
    #| echo: true
    #| output: true

    # Usa un vector para denotar los normbres.
    levels(Boston_dataset$chas) <- c("No", "Si")
    ```

## Veamos que sucede ahora.

```{r}
#| echo: true
#| output: true
#| fig-pos: center 

gf_percents( ~ chas, data = Boston_dataset)
```

Mucho mejor 游땎

## Re-ordenar categor칤as

Ahora, construyamos una gr치fica de barras de `rad`.

```{r}
#| echo: true
#| output: true
#| fig-pos: center 

gf_percents( ~ rad, data = Boston_dataset)
```

Las categor칤as no siguien un orden natural de izquierda a derecha: `Low`, `Medium`, y `High`.

## 

Para tener el orden de las categor칤as deseado, debemos de ser m치s expl칤citos al momento de definir la variable categ칩rica en R.

```{r}
#| echo: true
#| output: true
#| fig-pos: center

Boston_dataset$rad <- factor(Boston_dataset$rad, levels = c("Low", "Medium", "High"))
gf_percents( ~ rad, data = Boston_dataset)
```

Mucho mejor 游땎

